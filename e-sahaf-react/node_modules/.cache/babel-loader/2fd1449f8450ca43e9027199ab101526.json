{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _BindingContext = require(\"./BindingContext\");\n\nvar _createChildBridge = _interopRequireDefault(require(\"./createChildBridge\"));\n\nvar _StaticContainer = _interopRequireDefault(require(\"./StaticContainer\"));\n\nfunction extractTargetValue(eventOrValue) {\n  if (!eventOrValue || !eventOrValue.target) return eventOrValue;\n  var _eventOrValue$target = eventOrValue.target,\n      type = _eventOrValue$target.type,\n      value = _eventOrValue$target.value,\n      checked = _eventOrValue$target.checked,\n      multiple = _eventOrValue$target.multiple,\n      files = _eventOrValue$target.files;\n  if (type === 'file') return multiple ? files : files[0];\n\n  if (/number|range/.test(type)) {\n    var parsed = parseFloat(value);\n    return isNaN(parsed) ? null : parsed;\n  }\n\n  return /checkbox|radio/.test(type) ? checked : value;\n}\n/**\n * Hello\n */\n\n\nvar Binding =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  (0, _inheritsLoose2.default)(Binding, _React$PureComponent);\n\n  Binding.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var propsChanged = prevState && nextProps !== prevState.__lastProps;\n    return {\n      propsChanged: propsChanged,\n      __lastProps: nextProps\n    };\n  };\n\n  function Binding(props, context) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props, context) || this;\n\n    _this.handleEvent = function (event) {\n      var _this$props = _this.props,\n          bindTo = _this$props.bindTo,\n          _this$props$mapValue = _this$props.mapValue,\n          mapValue = _this$props$mapValue === void 0 ? extractTargetValue : _this$props$mapValue;\n\n      if (typeof bindTo === 'string') {\n        var _mapValue;\n\n        if (typeof mapValue !== 'object') mapValue = (_mapValue = {}, _mapValue[bindTo] = mapValue, _mapValue);\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (_this.updateBindingValue && mapValue) _this.updateBindingValue(mapValue, args);\n    };\n\n    _this.state = {};\n    _this.getBridgeProps = (0, _createChildBridge.default)(_this.handleEvent);\n    return _this;\n  }\n\n  var _proto = Binding.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    return _react.default.createElement(_BindingContext.Consumer, null, function (context) {\n      _this2.updateBindingValue = context && context.updateBindingValue;\n      var _this2$props = _this2.props,\n          changeProp = _this2$props.changeProp,\n          valueProp = _this2$props.valueProp,\n          children = _this2$props.children,\n          bindTo = _this2$props.bindTo;\n\n      var childProps = _this2.getBridgeProps(changeProp);\n\n      var valueChanged = true;\n\n      if (context) {\n        var lastValue = _this2._value;\n        childProps[valueProp] = _this2._value = context.getValue(bindTo);\n        valueChanged = lastValue !== _this2._value;\n      }\n\n      var propsChanged = _this2.state.propsChanged;\n      return _react.default.createElement(_StaticContainer.default, {\n        props: childProps,\n        shouldUpdate: propsChanged || valueChanged\n      }, children);\n    });\n  };\n\n  return Binding;\n}(_react.default.PureComponent);\n\nBinding.propTypes = {\n  /**\n   * A callback prop name that the Binding should listen for changes on.\n   *\n   * ```js\n   * <Binding changeProp='onSelect'>\n   *   {props => <MyDropDown {...props} />}\n   * </Binding>\n   * ```\n   */\n  changeProp: _propTypes.default.string.isRequired,\n\n  /**\n   * A prop name for the Binding to set from the BindingContext.\n   *\n   * ```js\n   * <Binding valueProp='selectedValue'>\n   *   {props => <MyDropDown {...props} />}\n   * </Binding>\n   * ```\n   */\n  valueProp: _propTypes.default.string.isRequired,\n\n  /**\n   * An field name or accessor function, extracting the Binding value\n   * from the overall BindingContext value. If a function, it's called\n   * with the form value, and the current Form `getter`.\n   *\n   * ```js\n   * <Binding bindTo='details.name'>\n   *   <input />\n   * </Binding>\n   *\n   * <Binding\n   *   bindTo={(model, getter) => {\n   *     let [first, last] = getter(model, 'details.name').split(' ')\n   *     return { first, last }\n   *   }}\n   * >\n   *  {props => <MyDropDown {...props} />}\n   * </Binding>\n   * ```\n   */\n  bindTo: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]).isRequired,\n\n  /**\n   * Customize how the Binding return value maps to the overall BindingContext `value`.\n   * `mapValue` can be a a string property name or a function that returns a\n   * value to be set to the `bindTo` field.\n   *\n   * **note:** the default value will attempt to extract the value from `target.value`\n   * so that native inputs will just work as expected.\n   *\n   * ```js\n   * <Binding\n   *   bindTo='name'\n   *   mapValue={dropdownValue =>\n   *     dropdownValue.first + ' ' + dropdownValue.last\n   *   }\n   * >\n   *  {props => <MyDropDown {...props} />}\n   * </Binding>\n   * ```\n   *\n   * You can also provide an object hash, mapping paths of the BindingContext `value`\n   * to fields in the Binding value using a string field name, or a function accessor.\n   *\n   * ```js\n   * <Binding\n   *   bindTo={model => {\n   *     let [first, last] = model.name.split(' ')\n   *     return { first, last }\n   *   }}\n   *   mapValue={{\n   *    name: dropdownValue =>\n   *      dropdownValue.first + ' ' + dropdownValue.last\n   *   }}\n   * >\n   *   {props => <MyDropDown {...props} />}\n   * </Binding>\n   * ```\n   *\n   * @type func | string | object\n   */\n  mapValue: function mapValue(props, propName, componentName) {\n    if (typeof props.bindTo === 'function' && typeof props[propName] === 'function') return new Error(propName + \" must be an Object or a string, when `bindTo` is a function\");\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      args[_key2 - 3] = arguments[_key2];\n    }\n\n    return _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.func]).apply(void 0, [props, propName, componentName].concat(args));\n  },\n\n  /**\n   * A render function that returns a react element and is\n   * passed the binding callbacks and value.\n   *\n   * ```js\n   * let Surround = (props) => <div {...props}>{props.children}</div>\n   *\n   * <Binding>\n   * {(props)=>\n   *   <Surround>\n   *     <input type='text' {...props} />\n   *   </Surround>\n   * }\n   * </Binding>\n   * ```\n   */\n  children: _propTypes.default.func.isRequired\n};\nBinding.defaultProps = {\n  changeProp: 'onChange',\n  valueProp: 'value'\n};\nvar _default = Binding;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}